#!/bin/bash

HERE=$(
    cd "${BASH_SOURCE[0]%/*}" || exit
    pwd
)
. "${HERE}/core/text.sh"
. "${HERE}/core/cli.sh"
. "${HERE}/core/logging.sh"
. "${HERE}/core/os.sh"

VERSION=$(cat ./VERSION)

op_() ( op_command_help )
op_call_() (error "Invalid call '${*}'")

op_option_v() (op_option_version)
op_option_version() (op_command_version)
op_command_version() (info "Version: ${VERSION}")

op_option_h() (op_command_help "$@")
op_option_help() (op_command_help "$@")
op_command_help() (
    echo "üèïÔ∏è  Clusterfiles v${VERSION}"

    case $1 in
    "setup")
        dedent """
                Setup

                üßß  Usage

                clusterfiles setup
            """
        exit 0
        ;;
    "provision")
        dedent """
                Provision

                üßß  Usage

                clusterfiles provision SSH_CONNECTION_STRING
            """
        exit 0
        ;;

    *)
        dedent """
                üßß  Usage

                $ clusterfiles [command]

                üßß Commands

                setup
                provision
            """
        exit 0
        ;;
    esac
)

#
# clone the templates directory and find/replace all  with $1
op_command_setup() {
    needs_command 'git'
    export ASDF_PYAPP_INCLUDE_DEPS=1
    export ASDF_PLUGIN_URL_ansible=https://github.com/amrox/asdf-pyapp.git

    info " üíÅ [ASDF] install with plugins"
    SHELL_PROFILE=$(get_shell_profile)

    if [ ! -f "$ASDF_BIN" ]; then
        info "===> ‚§µÔ∏è ASDF not detected ... installing"
        git clone https://github.com/asdf-vm/asdf.git "$ASDF_HOME" --branch "$ASDF_VERSION"
        [ ! command -v asdf ] &>/dev/null && {
            info "====> ‚öïÔ∏è adding to shell profile"
            append_uniquely "$SHELL_PROFILE" ". $ASDF_HOME/asdf.sh"
            append_uniquely "$SHELL_PROFILE" ". $ASDF_HOME/completions/asdf.bash"
        }
    fi

    source "$ASDF_BIN"

    for plugin in $(cut -d' ' -f1 ./.tool-versions); do
        info "==> üíÅ [ASDF] Ensure ${plugin} plugin"
        if [ -d "$ASDF_HOME/plugins/${plugin}" ]; then
            info "===> üì¶ attempting upgrade"
            asdf plugin-update "${plugin}"
        else
            info "===> ‚§µÔ∏è installing"
            plugin_url_var=ASDF_PLUGIN_URL_${plugin//-/_}
            plugin_url="${!plugin_url_var}"

            if [ ${!plugin_url_var+x} ]; then
                info "====> üíÅ [${plugin}] installed from ${plugin_url}"
            fi

            asdf plugin-add "${plugin}" "${plugin_url}"
        fi
    done

    PROCESSOR=$(get_processor)

    info "==> üíÅ [ASDF] install tools"
    case $PROCESSOR in
    M1)
        info "===> üíÅ [ASDF] install for M1"
        RUBY_CFLAGS=-DUSE_FFI_CLOSURE_ALLOC \
            arch -arm64 \
            asdf install
        ;;

    x86_64)
        info "===> üíÅ [ASDF] install for x86_64"
        asdf install
        ;;
    esac

    info "==> üíÅ [ASDF] reshim globals"
    asdf reshim

    info "==> üíÅ [ASDF] Done ‚úÖ"

    # command_exists "k3s" || {
    #     curl -sfL https://get.k3s.io | sh -
    #     export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    # }
    # command_exists "helm" || {
    #     curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    # }
    # command_exists "flux" || {
    #     curl -s https://fluxcd.io/install.sh | sudo bash
    #     . <(flux completion zsh)
    # }
}

op_command_bootstrap() {
    requires_arg "$1" "1: Missing github user"

    flux bootstrap github \
    --owner="$1" \
    --repository=clusterfiles \
    --branch=master \
    --path="./clusters/${5:-default}" \
    --personal
}

op_command_master() {
    requires_arg "$1" "1: Missing ssh user"
    requires_arg "$2" "2: Missing ssh host"
    requires_arg "$3" "3: Missing ssh key"

    k3sup install --host "$1" --user "$2" --ssh-key "$3"
}

op_command_join() {
    requires_arg "$1" "1: Missing ssh user"
    requires_arg "$2" "2: Missing ssh host"
    requires_arg "$3" "3: Missing ssh key"

    k3sup join --host "$1" --user "$2" --ssh-key "$3"
}

# Dispatch the arguments
dispatch op "$@"
